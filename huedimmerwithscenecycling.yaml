# Make sure to use the proper zigbee2mqtt topic and device name for the remote!
#
# Disclaimer: This software is provided "as is," without any warranties or guarantees of any kind, express or implied, including but not limited to warranties of merchantability, fitness for a particular purpose, or non-infringement. The authors and distributors shall not be liable for any damages arising from the use, inability to use, or performance of this software. Use at your own risk.

blueprint:
  name: Time-Adaptive Hue Dimmer with Scene Cycling, Per-Scene Type, and HA Scenes
  description: >
    Control lights with the Hue dimmer, with **time-based adaptive color temperature and brightness** *integrated* into the 'on' action. If lights do not turn on, try holding on to override the detection logic<br/>
    Scene type is selectable *per individual scene* with "Home Assistant Scene", alongside RGB Color and Color Temperature (Kelvin) as options. You can even mixed them. If you have less then 7 scenes, you can skip follow up scenes.<br/><br/>

    **✨ Features: ✨**
    <ul>
      <li>**Hue Dimmer Control:** Implements on, off, increase and dim brightness with minimal configuration - scene cycling requires a helper, sadly.</li>
      <li>**Time-Integrated Adaptive Lighting:** Time-of-day color temperature and brightness are applied *when lights are turned ON* via the dimmer if they were off. Brightness adjustments maintain the current color temperature.</li>
      <li>**Versatile Customizable Scenes (Per-Scene Type Selection):** Define up to 7 lighting scenes with custom **RGB colors**, **color temperature (Kelvin)**, *or* **activate pre-defined Home Assistant Scenes**. Mixing them is also possible. **Choose between RGB Color, Color Temperature, or Home Assistant Scene *for each scene individually*.**</li>
      <li>**Scene Cycling:** Cycle through the defined scenes using the **'Off' button** or **'hue' button** (both short press) on the Hue dimmer. The first press after automation start will activate scene 1, subsequent presses will cycle through scene 2, scene 3, ..., scene 7, and back to scene 1. Switching the light off using the **'Off' button** or **'hue' button** (both short press) will reset the scene index, so the next press will activate always scene 1. If you want to use less than 7 scenes, you can select "None" for  the follow up scene. All scenes after a "None" scene will be skipped. E.g. if you select "None" for scene 4, the scene cycling will go from scene 1, ..., scene 3, and back to scene 1. **Scene index is tracked using an `input_text` helper.**</li>
      <li>**Simplified Time Settings:** Only start times are needed for each adaptive lighting period (Morning, Day, Evening, Night).</li>
      <li>**Smooth Transitions:** Option for smooth transitions for dimmer button actions and initial adaptive lighting setting. **Separate, shorter transition time for brightness adjustments.**</li>
    </ul>
    
      **✨ Setup: ✨** <br/>
      Minimally you need to set up the first three fields:
    <ul>
      <li>MQTT Topic</li>
      <li>Lights to be acted upon (entities preferred, but devices and areas should work too) </li>
      <li> Scene Index Input Text Entity ID</li>
    </ul>
    
    Remainder can run with defaults but the scene cycling may be a bit underwhelming (and defaults to RGB which may be an issue for non RGB bulbs).

  domain: automation
  input:
    mqtt_topic:
      name: MQTT Topic (mandatory)
      description: The MQTT topic for the hue dimmer (usually `zigbee2mqtt/{FRIENDLY_NAME})`
      default: "zigbee2mqtt/"
      selector:
        text:

    target_lights_input:
      name: Lights to be acted upon (mandatory)
      description: The lights that the dimmer will control and for adaptive lighting.
      default: [ ]
      selector:
        target:
          entity:
            domain: light

    # --- Input Text Helper for Scene Index Tracking ---
    scene_index_input_text_entity_id:
      name: Scene Index Input Text Entity ID (mandatory, creation REQUIRED)
      description: >
        Mandatory for the blueprint to work, ideally a unique helper (below should achieve that) per dimmer you want to use <br/>
        **Naming Convention**<br/>
        <br/>
        For this blueprint to work correctly, it is **recommended** that you name your `input_text` entities using the following convention, which is based on your **MQTT Topic**:<br/>
        <br/>
        `hue_dimmer_scene_index_{{ MQTT_TOPIC_FRIENDLY_NAME }}_input_text`<br/>
        <br/>
        where `{{ MQTT_TOPIC_FRIENDLY_NAME }}` is derived from the last part of your configured MQTT Topic, with any invalid characters replaced by underscores.<br/>
        <br/>
        **Example:**<br/>
        If your MQTT Topic for a dimmer is `zigbee2mqtt/living_room_dimmer`, you should create an input_text entity with the Entity ID:<br/>
        <br/>
        `hue_dimmer_scene_index_living_room_dimmer_input_text`<br/>
        <br/>

      selector:
        entity:
          domain: input_text

    # User-defined inputs for transition times
    transition_time:
      name: Transition time (seconds) - On/Off and Initial State
      description: Transition time for turning lights ON/OFF and for applying initial adaptive lighting color/brightness when turning on.
      default: 5
      selector:
        number:
          mode: slider
          min: 0
          max: 300
          unit_of_measurement: seconds
          step: 1

    # User-defined inputs for brightness transition time
    brightness_transition_time:
      name: Brightness Transition time (seconds) - Brightness Adjustments
      description: Transition time specifically for brightness adjustments (up/down button presses/holds). Should typically be shorter for responsiveness.
      default: 1
      selector:
        number:
          mode: slider
          min: 0
          max: 300
          unit_of_measurement: seconds
          step: 1

    # --- Adaptive Lighting Settings ---
    adaptive_lighting_settings:
      name: Adaptive Lighting Settings (time periods, color temperature, brightness)
      icon: mdi:sun-thermometer-outline
      collapsed: true
      input:
        morning_start_time:
          name: Morning Start Time
          description: Time when morning lighting should begin and night lighting ends.
          default: "06:00:00"
          selector:
            time: { }

        morning_color_temp:
          name: Morning Color Temperature (Kelvin)
          description: Warmer, sunrise-like color temperature for mornings (e.g., 2700K - 3500K).
          default: 3000
          selector:
            number:
              mode: slider
              min: 2000
              max: 6500
              unit_of_measurement: K
              step: 100

        morning_brightness:
          name: Morning Brightness (Percentage)
          description: Brightness percentage for mornings.
          default: 40
          selector:
            number:
              mode: slider
              min: 0
              max: 100
              unit_of_measurement: "%"
              step: 1

        day_start_time:
          name: Day Start Time
          description: Time when day lighting should begin and morning lighting ends.
          default: "09:00:00"
          selector:
            time: { }

        day_color_temp:
          name: Day Color Temperature (Kelvin)
          description: Brighter, cooler color temperature for daytime (e.g., 4000K - 5000K).
          default: 4500
          selector:
            number:
              mode: slider
              min: 2000
              max: 6500
              unit_of_measurement: K
              step: 100

        day_brightness:
          name: Day Brightness (Percentage)
          description: Brightness percentage for daytime.
          default: 100
          selector:
            number:
              mode: slider
              min: 0
              max: 100
              unit_of_measurement: "%"
              step: 1

        evening_start_time:
          name: Evening Start Time
          description: Time when evening lighting should begin and day lighting ends.
          default: "17:00:00"
          selector:
            time: { }

        evening_color_temp:
          name: Evening Color Temperature (Kelvin)
          description: Warmer, sunset-like color temperature for evenings (e.g., 2500K - 3000K).
          default: 2700
          selector:
            number:
              mode: slider
              min: 2000
              max: 6500
              unit_of_measurement: K
              step: 100

        evening_brightness:
          name: Evening Brightness (Percentage)
          description: Brightness percentage for evenings.
          default: 60
          selector:
            number:
              mode: slider
              min: 0
              max: 100
              unit_of_measurement: "%"
              step: 1

        night_start_time:
          name: Night Start Time
          description: Time when night lighting should begin and evening lighting ends (can be past midnight).
          default: "22:00:00"
          selector:
            time: { }

        night_color_temp:
          name: Night Color Temperature (Kelvin)
          description: Very warm, dimmest color temperature for nighttime (e.g., 2200K - 2700K).
          default: 2500
          selector:
            number:
              mode: slider
              min: 2000
              max: 6500
              unit_of_measurement: K
              step: 100

        night_brightness:
          name: Night Brightness (Percentage)
          description: Brightness percentage for nighttime.
          default: 40
          selector:
            number:
              mode: slider
              min: 0
              max: 100
              unit_of_measurement: "%"
              step: 1

    # --- Scene Settings (Per-Scene Type Selection) ---
    scene_1_settings:
      name: Scene 1 Settings
      icon: mdi:palette
      collapsed: true
      input:
        scene_1_type_selector: # --- Scene Type Selector for Scene 1 ---
          name: Scene 1 Type
          description: Choose scene type for Scene 1 - RGB Color, Color Temperature (Kelvin), or Home Assistant Scene. Selecting 'None' will skip this and all following scenes. Default is RGB Color.
          default: rgb
          selector:
            select:
              options:
                - label: RGB Color
                  value: rgb
                - label: Color Temperature (Kelvin)
                  value: color_temp
                - label: Home Assistant Scene
                  value: scene
                - label: None
                  value: none
              mode: dropdown
        scene_1_color:
          name: Color of scene 1 (RGB)
          description: Which color for scene 1 (RGB) - will be used if Scene 1 Type is set to RGB Color.
          default: [ 255, 255, 255 ]
          selector:
            color_rgb:
        scene_1_brightness:
          name: Brightness of scene 1
          description: Which brightness for scene 1 (%) - *only used if Scene 1 Type is RGB Color or Color Temperature*.
          default: 80
          selector:
            number:
              min: 1
              max: 100
        scene_1_color_temp:
          name: Color Temperature of scene 1 (Kelvin)
          description: Which color temperature for scene 1 (Kelvin) - will be used if Scene 1 Type is set to Color Temperature.
          default: 3000
          selector:
            number:
              mode: slider
              min: 2000
              max: 6500
              unit_of_measurement: K
              step: 100
        scene_1_scene:
          name: Home Assistant Scene for scene 1
          description: Select a Home Assistant scene to activate for Scene 1 - will be used if Scene 1 Type is set to Home Assistant Scene.
          default: ""
          selector:
            entity:
              domain: scene

    scene_2_settings:
      name: Scene 2 Settings
      icon: mdi:palette
      collapsed: true
      input:
        scene_2_type_selector:
          name: Scene 2 Type
          description: Choose scene type for Scene 2 - RGB Color, Color Temperature (Kelvin), or Home Assistant Scene. Selecting 'None' will skip this and all following scenes. Default is RGB Color.
          default: rgb
          selector:
            select:
              options:
                - label: RGB Color
                  value: rgb
                - label: Color Temperature (Kelvin)
                  value: color_temp
                - label: Home Assistant Scene
                  value: scene
                - label: None
                  value: none
              mode: dropdown
        scene_2_color:
          name: Color of scene 2 (RGB)
          description: Which color for scene 2 (RGB) - will be used if Scene 2 Type is set to RGB Color.
          default: [ 255, 0, 0 ]
          selector:
            color_rgb:
        scene_2_brightness:
          name: Brightness of scene 2
          description: Which brightness for scene 2 (%) - *only used if Scene 2 Type is RGB Color or Color Temperature*.
          default: 80
          selector:
            number:
              min: 1
              max: 100
        scene_2_color_temp:
          name: Color Temperature of scene 2 (Kelvin)
          description: Which color temperature for scene 2 (Kelvin) - will be used if Scene 2 Type is set to Color Temperature.
          default: 4000
          selector:
            number:
              mode: slider
              min: 2000
              max: 6500
              unit_of_measurement: K
              step: 100
        scene_2_scene:
          name: Home Assistant Scene for scene 2
          description: Select a Home Assistant scene to activate for Scene 2 - will be used if Scene 2 Type is set to Home Assistant Scene.
          default: ""
          selector:
            entity:
              domain: scene

    scene_3_settings:
      name: Scene 3 Settings
      icon: mdi:palette
      collapsed: true
      input:
        scene_3_type_selector:
          name: Scene 3 Type
          description: Choose scene type for Scene 3 - RGB Color, Color Temperature (Kelvin), or Home Assistant Scene. Selecting 'None' will skip this and all following scenes. Default is RGB Color.
          default: rgb
          selector:
            select:
              options:
                - label: RGB Color
                  value: rgb
                - label: Color Temperature (Kelvin)
                  value: color_temp
                - label: Home Assistant Scene
                  value: scene
                - label: None
                  value: none
              mode: dropdown
        scene_3_color:
          name: Color of scene 3 (RGB)
          description: Which color for scene 3 (RGB) - will be used if Scene 3 Type is set to RGB Color.
          default: [ 0, 255, 0 ]
          selector:
            color_rgb:
        scene_3_brightness:
          name: Brightness of scene 3
          description: Which brightness for scene 3 (%) - *only used if Scene 3 Type is RGB Color or Color Temperature*.
          default: 80
          selector:
            number:
              min: 1
              max: 100
        scene_3_color_temp:
          name: Color Temperature of scene 3 (Kelvin)
          description: Which color temperature for scene 3 (Kelvin) - will be used if Scene 3 Type is set to Color Temperature.
          default: 5000
          selector:
            number:
              mode: slider
              min: 2000
              max: 6500
              unit_of_measurement: K
              step: 100
        scene_3_scene:
          name: Home Assistant Scene for scene 3
          description: Select a Home Assistant scene to activate for Scene 3 - will be used if Scene 3 Type is set to Home Assistant Scene.
          default: ""
          selector:
            entity:
              domain: scene

    scene_4_settings:
      name: Scene 4 Settings
      icon: mdi:palette
      collapsed: true
      input:
        scene_4_type_selector:
          name: Scene 4 Type
          description: Choose scene type for Scene 4 - RGB Color, Color Temperature (Kelvin), or Home Assistant Scene. Selecting 'None' will skip this and all following scenes. Default is RGB Color.
          default: rgb
          selector:
            select:
              options:
                - label: RGB Color
                  value: rgb
                - label: Color Temperature (Kelvin)
                  value: color_temp
                - label: Home Assistant Scene
                  value: scene
                - label: None
                  value: none
              mode: dropdown
        scene_4_color:
          name: Color of scene 4 (RGB)
          description: Which color for scene 4 (RGB) - will be used if Scene 4 Type is set to RGB Color.
          default: [ 0, 0, 255 ]
          selector:
            color_rgb:
        scene_4_brightness:
          name: Brightness of scene 4
          description: Which brightness for scene 4 (%) - *only used if Scene 4 Type is RGB Color or Color Temperature*.
          default: 80
          selector:
            number:
              min: 1
              max: 100
        scene_4_color_temp:
          name: Color Temperature of scene 4 (Kelvin)
          description: Which color temperature for scene 4 (Kelvin) - will be used if Scene 4 Type is set to Color Temperature.
          default: 2500
          selector:
            number:
              mode: slider
              min: 2000
              max: 6500
              unit_of_measurement: K
              step: 100
        scene_4_scene:
          name: Home Assistant Scene for scene 4
          description: Select a Home Assistant scene to activate for Scene 4 - will be used if Scene 4 Type is set to Home Assistant Scene.
          default: ""
          selector:
            entity:
              domain: scene

    scene_5_settings:
      name: Scene 5 Settings
      icon: mdi:palette
      collapsed: true
      input:
        scene_5_type_selector:
          name: Scene 5 Type
          description: Choose scene type for Scene 5 - RGB Color, Color Temperature (Kelvin), or Home Assistant Scene. Selecting 'None' will skip this and all following scenes. Default is RGB Color.
          default: rgb
          selector:
            select:
              options:
                - label: RGB Color
                  value: rgb
                - label: Color Temperature (Kelvin)
                  value: color_temp
                - label: Home Assistant Scene
                  value: scene
                - label: None
                  value: none
              mode: dropdown
        scene_5_color:
          name: Color of scene 5 (RGB)
          description: Which color for scene 5 (RGB) - will be used if Scene 5 Type is set to RGB Color.
          default: [ 255, 80, 80 ]
          selector:
            color_rgb:
        scene_5_brightness:
          name: Brightness of scene 5
          description: Which brightness for scene 5 (%) - *only used if Scene 5 Type is RGB Color or Color Temperature*.
          default: 80
          selector:
            number:
              min: 1
              max: 100
        scene_5_color_temp:
          name: Color Temperature of scene 5 (Kelvin)
          description: Which color temperature for scene 5 (Kelvin) - will be used if Scene 5 Type is set to Color Temperature.
          default: 3500
          selector:
            number:
              mode: slider
              min: 2000
              max: 6500
              unit_of_measurement: K
              step: 100
        scene_5_scene:
          name: Home Assistant Scene for scene 5
          description: Select a Home Assistant scene to activate for Scene 5 - will be used if Scene 5 Type is set to Home Assistant Scene.
          default: ""
          selector:
            entity:
              domain: scene

    scene_6_settings:
      name: Scene 6 Settings
      icon: mdi:palette
      collapsed: true
      input:
        scene_6_type_selector:
          name: Scene 6 Type
          description: Choose scene type for Scene 6 - RGB Color, Color Temperature (Kelvin), or Home Assistant Scene. Selecting 'None' will skip this and all following scenes. Default is RGB Color.
          default: rgb
          selector:
            select:
              options:
                - label: RGB Color
                  value: rgb
                - label: Color Temperature (Kelvin)
                  value: color_temp
                - label: Home Assistant Scene
                  value: scene
                - label: None
                  value: none
              mode: dropdown
        scene_6_color:
          name: Color of scene 6 (RGB)
          description: Which color for scene 6 (RGB) - will be used if Scene 6 Type is set to RGB Color.
          default: [ 80, 80, 255 ]
          selector:
            color_rgb:
        scene_6_brightness:
          name: Brightness of scene 6
          description: Which brightness for scene 6 (%) - *only used if Scene 6 Type is RGB Color or Color Temperature*.
          default: 80
          selector:
            number:
              min: 1
              max: 100
        scene_6_color_temp:
          name: Color Temperature of scene 6 (Kelvin)
          description: Which color temperature for scene 6 (Kelvin) - will be used if Scene 6 Type is set to Color Temperature.
          default: 6000
          selector:
            number:
              mode: slider
              min: 2000
              max: 6500
              unit_of_measurement: K
              step: 100
        scene_6_scene:
          name: Home Assistant Scene for scene 6
          description: Select a Home Assistant scene to activate for Scene 6 - will be used if Scene 6 Type is set to Home Assistant Scene.
          default: ""
          selector:
            entity:
              domain: scene

    scene_7_settings:
      name: Scene 7 Settings
      icon: mdi:palette
      collapsed: true
      input:
        scene_7_type_selector:
          name: Scene 7 Type
          description: Choose scene type for Scene 7 - RGB Color, Color Temperature (Kelvin), or Home Assistant Scene. Selecting 'None' will skip this and all following scenes. Default is RGB Color.
          default: rgb
          selector:
            select:
              options:
                - label: RGB Color
                  value: rgb
                - label: Color Temperature (Kelvin)
                  value: color_temp
                - label: Home Assistant Scene
                  value: scene
                - label: None
                  value: none
              mode: dropdown
        scene_7_color:
          name: Color of scene 7 (RGB)
          description: Which color for scene 7 (RGB) - will be used if Scene 7 Type is set to RGB Color.
          default: [ 80, 80, 255 ]
          selector:
            color_rgb:
        scene_7_brightness:
          name: Brightness of scene 7
          description: Which brightness for scene 7 (%) - *only used if Scene 7 Type is RGB Color or Color Temperature*.
          default: 80
          selector:
            number:
              min: 1
              max: 100
        scene_7_color_temp:
          name: Color Temperature of scene 7 (Kelvin)
          description: Which color temperature for scene 7 (Kelvin) - will be used if Scene 7 Type is set to Color Temperature.
          default: 2200
          selector:
            number:
              mode: slider
              min: 2000
              max: 6500
              unit_of_measurement: K
              step: 100
        scene_7_scene:
          name: Home Assistant Scene for scene 7
          description: Select a Home Assistant scene to activate for Scene 7 - will be used if Scene 7 Type is set to Home Assistant Scene.
          default: ""
          selector:
            entity:
              domain: scene


trigger:
  # --- Trigger on MQTT message from the Hue Dimmer ---
  - platform: mqtt
    topic: !input mqtt_topic

action:
  - choose:
      # Continue only if an 'action' is defined in the payload. This is to avoid accessing empty dictionaries later on.
      - conditions:
          - condition: template
            value_template: "{{ trigger.payload_json.action is defined}}"
        sequence:
          - variables:
              command_name: "{{ trigger.payload_json.action }}"
              target_lights: !input target_lights_input

              # Get User-defined inputs for the type of scene (RGB, Color Temperature, Home Assistant Scene or None) from the input section
              scene_type_array: # --- Array for Scene Types ---
                - !input scene_1_type_selector
                - !input scene_2_type_selector
                - !input scene_3_type_selector
                - !input scene_4_type_selector
                - !input scene_5_type_selector
                - !input scene_6_type_selector
                - !input scene_7_type_selector

              # Get User-defined inputs for RGB colors (scene_1_settings, scene_2_settings, etc.) from the input section
              scene_color_array: # --- RGB Color Array ---
                - !input scene_1_color
                - !input scene_2_color
                - !input scene_3_color
                - !input scene_4_color
                - !input scene_5_color
                - !input scene_6_color
                - !input scene_7_color

              # Get User-defined inputs for color temperatures (scene_1_settings, scene_2_settings, etc.) from the input section
              scene_color_temp_array:
                - !input scene_1_color_temp
                - !input scene_2_color_temp
                - !input scene_3_color_temp
                - !input scene_4_color_temp
                - !input scene_5_color_temp
                - !input scene_6_color_temp
                - !input scene_7_color_temp

              # Get User-defined inputs for brightness levels (scene_1_settings, scene_2_settings, etc.) from the input section
              scene_brightness_array: # --- Brightness Array ---
                - !input scene_1_brightness
                - !input scene_2_brightness
                - !input scene_3_brightness
                - !input scene_4_brightness
                - !input scene_5_brightness
                - !input scene_6_brightness
                - !input scene_7_brightness

              # Get User-defined inputs for Home Assistant scenes (scene_1_settings, scene_2_settings, etc.) from the input section
              scene_scene_array: # --- Scene Entity ID Array ---
                - !input scene_1_scene
                - !input scene_2_scene
                - !input scene_3_scene
                - !input scene_4_scene
                - !input scene_5_scene
                - !input scene_6_scene
                - !input scene_7_scene


              # Get User-defined inputs for transition times from the input section
              transition_time_var: !input transition_time
              brightness_transition_time_var: !input brightness_transition_time


              # Check if there is any light on?
              # Based on https://community.home-assistant.io/t/wth-howto-reference-a-device-areas-state-on-off-unavailable-with-a-target-selector/484428/43
              entities: >
                {%- set ns = namespace(ret=[]) %}
                {%- for key in ['device_id', 'area_id', 'entity_id'] %}
                  {%- set items = target_lights.get(key, [])  %}
                  {%- if items %}
                    {%- set items = [ items ] if items is string else items %}
                    {%- set filt = key.split('_') | first %}
                    {%- set items = items if filt == 'entity' else items | map(filt ~ '_entities') | sum(start=[]) %}
                    {%- set ns.ret = ns.ret + [ items ] %}
                  {%- endif %}
                {%- endfor %}
                {{ ns.ret | sum(start=[]) }}
              filtered: "{{ entities | select( 'search' , '^light' ) | select('is_state', 'on') | list }}"
              lights_on: "{{ filtered | count > 0 }}"

              # Get User-defined inputs for adaptive lighting settings from the input section
              day_start: !input day_start_time
              evening_start: !input evening_start_time
              night_start: !input night_start_time
              morning_start: !input morning_start_time
              var_morning_color_temp: !input morning_color_temp
              var_day_color_temp: !input day_color_temp
              var_evening_color_temp: !input evening_color_temp
              var_night_color_temp: !input night_color_temp
              var_morning_brightness: !input morning_brightness
              var_day_brightness: !input day_brightness
              var_evening_brightness: !input evening_brightness
              var_night_brightness: !input night_brightness

              current_time: "{{ now().strftime('%H:%M:%S') }}"


              # Set the adaptive lighting color temperature and brightness based on the current time
              # and pre-defined time periods (morning, day, evening, night).
              adaptive_color_temp: >
                {% if current_time >= morning_start and current_time < day_start %}
                  {{ var_morning_color_temp }}
                {% elif current_time >= day_start and current_time < evening_start %}
                  {{ var_day_color_temp }}
                {% elif current_time >= evening_start and current_time < night_start %}
                  {{ var_evening_color_temp }}
                {% else %} {# Night or time past midnight #}
                  {{ var_night_color_temp }}
                {% endif %}
              # Set the adaptive brightness percentage based on the current time
              # and pre-defined time periods (morning, day, evening, night).
              adaptive_brightness_pct: >
                {% if current_time >= morning_start and current_time < day_start %}
                  {{ var_morning_brightness }}
                {% elif current_time >= day_start and current_time < evening_start %}
                  {{ var_day_brightness }}
                {% elif current_time >= evening_start and current_time < night_start %}
                  {{ var_evening_brightness }}
                {% else %} {# Night or time past midnight #}
                  {{ var_night_brightness }}
                {% endif %}
              

              # --- Scene Index Tracking ---
              # Get the current scene index from the input text entity and covert it to an integer.
              # The stored value in the current scene index has a range from 1 to 7 (see scene_1_settings, scene_2_settings, etc.).
              # You can check the current scene index by using "Helper" in the Home Assistant UI.
              scene_index_entity_id: !input scene_index_input_text_entity_id
              current_scene_index: "{{ states(scene_index_entity_id) | int(0) }}"

              # The next scene index is calculated based on the current scene index.
              # The index will be reset to 1 if it exceeds the maximum number of scenes (7).
              next_scene_index: >
                {% set next_index = current_scene_index + 1 %}
                {% if next_index > 7 %}
                  1
                {% else %}
                  {{ next_index }}
                {% endif %}

              # Take into account that the scene index is 1-based, but the array is 0-based.
              next_scene_color: "{{ scene_color_array[next_scene_index - 1] }}"
              next_scene_color_temp: "{{ scene_color_temp_array[next_scene_index - 1] }}"
              next_scene_brightness: "{{ scene_brightness_array[next_scene_index - 1] }}"
              next_scene_ha_scene: "{{ scene_scene_array[next_scene_index - 1] }}"


          # --- Dimmer Button Logic ---
          - choose:
              # Condition 1: Turn lights off, if they are on right now, AND the I/O button is pressed.
              - conditions:
                  - condition: template
                    value_template: "{{ command_name == 'on_press_release' and lights_on }}"
                sequence:
                  - action: light.turn_off
                    target: "{{target_lights}}"
                    data:
                      transition: "{{ transition_time_var }}"
                  # Reset the scene index to 0 when lights are turned off.
                  # This is to ensure that the next scene index starts from 1 when lights are turned on again.
                  - service: input_text.set_value
                    target:
                      entity_id: "{{ scene_index_entity_id }}"
                    data:
                      value: "0"

              # Condition 2: Turn lights on, if they are on right now, AND the I/O button is pressed or held.
              - conditions:
                  - condition: template
                    value_template: "{{ (command_name == 'on_press_release' and not(lights_on)) or command_name == 'on_hold' }}"
                sequence:
                  - action: light.turn_on
                    target: "{{target_lights}}"
                    data:
                      transition: "{{ transition_time_var }}"
                      color_temp_kelvin: "{{ adaptive_color_temp }}"
                      brightness_pct: "{{ adaptive_brightness_pct }}"

              # Condition 3: Adjust brightness up, no matter if lights are on or off. They will be turned if off.
              - conditions:
                  - condition: template
                    value_template: "{{ command_name == 'up_press_release' or command_name == 'up_hold' }}"
                sequence:
                  - action: light.turn_on
                    target: "{{target_lights}}"
                    data:
                      brightness_step_pct: +10
                      transition: "{{ brightness_transition_time_var }}"


              # Condition 4: Adjust brightness down until 0% (state off). They won't stay at 1 % if you press the button again.
              - conditions:
                  - condition: template
                    value_template: "{{ command_name == 'down_press_release' or  command_name == 'down_hold' }}"
                sequence:
                  - action: light.turn_on
                    target: "{{target_lights}}"
                    data:
                      brightness_step_pct: -10
                      transition: "{{ brightness_transition_time_var }}"


              # Condition 5: Scene Cycling Logic when the 'OFF' or 'HUE' button is pressed, depending on the dimmer model
              - conditions:
                  - condition: template
                    value_template: "{{ command_name == 'off_press_release' }}"
                sequence:
                  # Update Input Text with the next scene index (RGB, Color Temperature, Home Assistant Scene or None)
                  - service: input_text.set_value
                    target:
                      entity_id: "{{ scene_index_entity_id }}"
                    data:
                      value: "{{ next_scene_index }}"


                  # -- Reset the scene index to 0 when the next scene index is 'none'. ---
                  - choose:
                      - conditions:
                          - condition: template
                            value_template: "{{ scene_type_array[next_scene_index] == 'none' }}"
                        sequence:
                          # Reset the scene index to 0
                          # This is to ensure that a "none" scene cannot be activated.
                          - service: input_text.set_value
                            target:
                              entity_id: "{{ scene_index_entity_id }}"
                            data:
                              value: "0"


                  # --- Choose one block for Scene Type branching ---
                  - choose:
                      # Condition 5a: activate an RGB Scene
                      - conditions:
                          - condition: template
                            value_template: "{{ scene_type_array[next_scene_index - 1] == 'rgb' }}"
                        sequence:
                          - action: light.turn_on # --- Turn on lights with an RGB scene ---
                            target: "{{target_lights}}"
                            data:
                              transition: "{{ transition_time_var }}"
                              rgb_color: "{{ next_scene_color }}"
                              brightness_pct: "{{ next_scene_brightness }}"


                      # Condition 5b: activate a Color Temperature Scene
                      - conditions:
                          - condition: template
                            value_template: "{{ scene_type_array[next_scene_index - 1] == 'color_temp' }}"
                        sequence:
                          - action: light.turn_on # --- Turn on lights with a Color Temp scene ---
                            target: "{{target_lights}}"
                            data:
                              transition: "{{ transition_time_var }}"
                              color_temp_kelvin: "{{ next_scene_color_temp }}"
                              brightness_pct: "{{ next_scene_brightness }}"

                      # Condition 5c: activate a Home Assistant Scene
                      - conditions:
                          - condition: template
                            value_template: "{{ scene_type_array[next_scene_index - 1] == 'scene' }}"
                        sequence:
                          - action: scene.turn_on # --- Activate Home Assistant Scene ---
                            target:
                              entity_id: "{{ next_scene_ha_scene }}"

mode: queued
